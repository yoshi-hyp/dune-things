WITH transfers AS (

  SELECT  day,
          address,
          token_address,
          sum(amount) AS amount -- Net inflow or outflow per day
  FROM

    (
      -- Token Inflow
      SELECT  date_trunc('day', evt_block_time) AS day,
              "to" AS address,
              tr.contract_address AS token_address,
              value AS amount
      FROM erc20."ERC20_evt_Transfer" tr
      WHERE "to" = '{{wallet_address}}' --Filter for holding address
        AND contract_address = '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48' -- Filter for token address if you only want to see a specific token

        -- Plug tables together
      UNION ALL

      -- Token Outflow
      SELECT  date_trunc('day', evt_block_time) AS day,
              "from" AS address,
              tr.contract_address AS token_address,
              -value AS amount
      FROM erc20."ERC20_evt_Transfer" tr
      WHERE "from" = '{{wallet_address}}' --Filter for holding address
        AND contract_address = '\xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' -- Filter for token address if you only want to see a specific token
    ) t
  GROUP BY 1, 2, 3
)

   , balances_with_gap_days AS (
  SELECT  t.day,
          address,
          t.token_address,
          SUM(amount) OVER (PARTITION BY token_address, address ORDER BY t.day) AS balance, -- balance per day with a transfer
          lead(day, 1, now()) OVER (PARTITION BY token_address, address ORDER BY t.day) AS next_day -- the day after a day with a transfer
  FROM transfers t
)

   , days AS (
  SELECT generate_series('{{init_date}}'::timestamp, date_trunc('day', NOW()), '1 day') AS day -- Generate all days since the first contract
)

   , balance_all_days AS (
  SELECT  d.day,
          address,
          erc.symbol,
          b.token_address,
          SUM(balance/10^decimals) AS balance
  FROM balances_with_gap_days b
         INNER JOIN days d ON b.day <= d.day AND d.day < b.next_day -- Yields an observation for every day after the first transfer until the next day with transfer
         INNER JOIN erc20.tokens erc ON b.token_address = erc.contract_address
  GROUP BY 1, 2, 3, 4
  ORDER BY 1, 2, 3, 4
)

SELECT  b.day,
        b.symbol,
        b.token_address,
        SUM(balance) AS token_balance
FROM balance_all_days b
GROUP BY 1,2,3
ORDER BY 1,2,3;
